###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       06/Nov/2024  21:18:45
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu8\Desktop\test1\user\main.c
#    Command line =  
#        -f C:\Users\pnu8\AppData\Local\Temp\EWA0A4.tmp
#        (C:\Users\pnu8\Desktop\test1\user\main.c -D USE_STDPERIPH_DRIVER -D
#        STM32F10X_CL -lC C:\Users\pnu8\Desktop\test1\Debug\List -o
#        C:\Users\pnu8\Desktop\test1\Debug\Obj --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu8\Desktop\test1\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\pnu8\Desktop\test1\libraries\CMSIS\DeviceSupport\Startup\ -I
#        C:\Users\pnu8\Desktop\test1\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu8\Desktop\test1\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu8\Desktop\test1\user\ -I
#        C:\Users\pnu8\Desktop\test1\user\inc\ -I
#        C:\Users\pnu8\Desktop\test1\libraries\LCD\ -Ol -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu8\Desktop\test1\Debug\List\main.lst
#    Object file  =  C:\Users\pnu8\Desktop\test1\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu8\Desktop\test1\user\main.c
      1          #include "stm32f10x.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x....             LDR.N    R1,??DataTable4  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
      2          #include "core_cm3.h"
      3          #include "misc.h"
      4          #include "stm32f10x_gpio.h"
      5          #include "stm32f10x_rcc.h"
      6          #include "stm32f10x_usart.h"
      7          #include "stm32f10x_adc.h"
      8          #include "lcd.h"
      9          #include "touch.h"
     10          
     11           //@@ @@ @@

   \                                 In section .data, align 4
     12          int color[12] = {WHITE,CYAN,BLUE,RED,MAGENTA,LGRAY,GREEN,YELLOW,BROWN,RED,GRAY};
   \                     color:
   \   00000000   0x0000FFFF         DC32 65535, 32767, 31, 63488, 63519, 50712, 2016, 65504, 48192, 63488
   \              0x00007FFF   
   \              0x0000001F   
   \              0x0000F800   
   \              0x0000F81F   
   \              0x0000C618   
   \              0x000007E0   
   \              0x0000FFE0   
   \              0x0000BC40   
   \              0x0000F800   
   \   00000028   0x00008430         DC32 33840
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .bss, align 2
     13          uint16_t value;
   \                     value:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     14          uint16_t x1 = 0;
   \                     x1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     15          uint16_t y1 = 0;
   \                     y1:
   \   00000000                      DS8 2
     16          
     17          void RCC_Configure(void);
     18          void GPIO_Configure(void);
     19          void ADC_Configure(void);
     20          void NVIC_Configure(void);
     21          void GPIO_Configure(void);
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void RCC_Configure() {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     24              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     25              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     26              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     27              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     28              RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     29              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     30          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void GPIO_Configure() {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     33              GPIO_InitTypeDef GPIO_InitStructure;
     34              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     35              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     36              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0003      STRB     R0,[SP, #+3]
     37              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40010800
   \   00000018   0x.... 0x....      BL       GPIO_Init
     38          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
     39          
     40          // ADC @@@ @@ @@
     41          // ADC @ @@@ @@@@@@

   \                                 In section .text, align 2, keep-with-next
     42          void ADC_Configure() {
   \                     ADC_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     43              // ADC @@ @@ @@@@@@@@(@@@@@@)
     44              ADC_InitTypeDef ADC_InitStructure;
     45              ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
     46              ADC_InitStructure.ADC_ScanConvMode = ENABLE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     47              ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF88D 0x0005      STRB     R0,[SP, #+5]
     48              ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; // @@@@ @@
   \   00000014   0xF45F 0x2060      MOVS     R0,#+917504
   \   00000018   0x9002             STR      R0,[SP, #+8]
     49              ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     50              ADC_InitStructure.ADC_NbrOfChannel = 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xF88D 0x0010      STRB     R0,[SP, #+16]
     51              
     52              
     53              ADC_Init(ADC1, &ADC_InitStructure);
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000028   0x.... 0x....      BL       ADC_Init
     54              ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_239Cycles5); // @@ @@ @@ @@@
   \   0000002C   0x2307             MOVS     R3,#+7
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000034   0x.... 0x....      BL       ADC_RegularChannelConfig
     55              ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0xF44F 0x7108      MOV      R1,#+544
   \   0000003E   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000040   0x.... 0x....      BL       ADC_ITConfig
     56              ADC_Cmd(ADC1, ENABLE);
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000048   0x.... 0x....      BL       ADC_Cmd
     57              // set @@@@ @@?
     58          
     59              // Calibration@@? :  @@@@ @@@@ @@@@ @@
     60             
     61              ADC_ResetCalibration(ADC1);
   \   0000004C   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   0000004E   0x.... 0x....      BL       ADC_ResetCalibration
     62              // Calibration @@@
     63              while(ADC_GetResetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_0: (+1)
   \   00000052   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000054   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD1FA             BNE.N    ??ADC_Configure_0
     64              // Calibration @@
     65              ADC_StartCalibration(ADC1);
   \   0000005C   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   0000005E   0x.... 0x....      BL       ADC_StartCalibration
     66              while(ADC_GetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_1: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000064   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1FA             BNE.N    ??ADC_Configure_1
     67              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000070   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     68              
     69              
     70              // ADC @@
     71          }
   \   00000074   0xB005             ADD      SP,SP,#+20
   \   00000076   0xBD00             POP      {PC}             ;; return
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void NVIC_Configure() {
   \                     NVIC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     74              NVIC_InitTypeDef NVIC_InitStructure;
     75          
     76              // TODO: fill the arg you want
     77              NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0); 
   \   00000002   0xF44F 0x60E0      MOV      R0,#+1792
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
     78              NVIC_EnableIRQ(ADC1_2_IRQn);
   \   0000000A   0x2012             MOVS     R0,#+18
   \   0000000C   0x.... 0x....      BL       __NVIC_EnableIRQ
     79              NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
   \   00000010   0x2012             MOVS     R0,#+18
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
     80              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
     81              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     82              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x0003      STRB     R0,[SP, #+3]
     83              NVIC_Init(&NVIC_InitStructure);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       NVIC_Init
     84          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
     85          
     86          

   \                                 In section .text, align 2, keep-with-next
     87          void ADC1_2_IRQHandler() {
   \                     ADC1_2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     88            if(ADC_GetITStatus(ADC1, ADC_IT_EOC) != RESET){
   \   00000002   0xF44F 0x7108      MOV      R1,#+544
   \   00000006   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000008   0x.... 0x....      BL       ADC_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD009             BEQ.N    ??ADC1_2_IRQHandler_0
     89              value = ADC_GetConversionValue(ADC1);
   \   00000010   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000012   0x.... 0x....      BL       ADC_GetConversionValue
   \   00000016   0x....             LDR.N    R1,??DataTable4_3
   \   00000018   0x8008             STRH     R0,[R1, #+0]
     90              ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
   \   0000001A   0xF44F 0x7108      MOV      R1,#+544
   \   0000001E   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   00000020   0x.... 0x....      BL       ADC_ClearITPendingBit
     91            }
     92          }
   \                     ??ADC1_2_IRQHandler_0: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     93          int main() {
   \                     main: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     94              // LCD @@ @@@ LCD_Init@ @@@@ @@@@ @@@ @ @@@@
     95              SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
     96              RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
     97              GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
     98              ADC_Configure();
   \   0000000E   0x.... 0x....      BL       ADC_Configure
     99              NVIC_Configure();
   \   00000012   0x.... 0x....      BL       NVIC_Configure
    100              // -----------------------------------  
    101              LCD_Init();
   \   00000016   0x.... 0x....      BL       LCD_Init
    102              Touch_Configuration();
   \   0000001A   0x.... 0x....      BL       Touch_Configuration
    103              Touch_Adjust();
   \   0000001E   0x.... 0x....      BL       Touch_Adjust
    104              LCD_Clear(WHITE);
   \   00000022   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000026   0x.... 0x....      BL       LCD_Clear
    105               LCD_ShowString(3, 3, "THUR_Team08", BLACK, WHITE);
   \   0000002A   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x2300             MOVS     R3,#+0
   \   00000032   0x....             LDR.N    R2,??DataTable4_4
   \   00000034   0x2103             MOVS     R1,#+3
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x.... 0x....      BL       LCD_ShowString
    106              while(1){
    107              // TODO : LCD @ @@ @ @@ @@ @@
    108                  Touch_GetXY(&x1, &y1, 1);
   \                     ??main_0: (+1)
   \   0000003C   0x2201             MOVS     R2,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable4_5
   \   00000040   0x....             LDR.N    R0,??DataTable4_6
   \   00000042   0x.... 0x....      BL       Touch_GetXY
    109                  Convert_Pos(x1, y1, &x1, &y1);
   \   00000046   0x....             LDR.N    R3,??DataTable4_5
   \   00000048   0x....             LDR.N    R2,??DataTable4_6
   \   0000004A   0x....             LDR.N    R0,??DataTable4_5
   \   0000004C   0x8801             LDRH     R1,[R0, #+0]
   \   0000004E   0x....             LDR.N    R0,??DataTable4_6
   \   00000050   0x8800             LDRH     R0,[R0, #+0]
   \   00000052   0x.... 0x....      BL       Convert_Pos
    110          
    111                  LCD_ShowNum(50,50, x1, 4, BLACK, WHITE);
   \   00000056   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0x2304             MOVS     R3,#+4
   \   00000062   0x....             LDR.N    R0,??DataTable4_6
   \   00000064   0x8802             LDRH     R2,[R0, #+0]
   \   00000066   0x2132             MOVS     R1,#+50
   \   00000068   0x2032             MOVS     R0,#+50
   \   0000006A   0x.... 0x....      BL       LCD_ShowNum
    112                  LCD_ShowNum(50, 70, y1, 4, BLACK, WHITE);
   \   0000006E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000072   0x9001             STR      R0,[SP, #+4]
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x2304             MOVS     R3,#+4
   \   0000007A   0x....             LDR.N    R0,??DataTable4_5
   \   0000007C   0x8802             LDRH     R2,[R0, #+0]
   \   0000007E   0x2146             MOVS     R1,#+70
   \   00000080   0x2032             MOVS     R0,#+50
   \   00000082   0x.... 0x....      BL       LCD_ShowNum
    113          
    114                  ADC_ITConfig(ADC1,ADC_IT_EOC,ENABLE);
   \   00000086   0x2201             MOVS     R2,#+1
   \   00000088   0xF44F 0x7108      MOV      R1,#+544
   \   0000008C   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   0000008E   0x.... 0x....      BL       ADC_ITConfig
    115                  LCD_ShowNum(60,100, value, 4, BLACK, WHITE);
   \   00000092   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000096   0x9001             STR      R0,[SP, #+4]
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0x2304             MOVS     R3,#+4
   \   0000009E   0x....             LDR.N    R0,??DataTable4_3
   \   000000A0   0x8802             LDRH     R2,[R0, #+0]
   \   000000A2   0x2164             MOVS     R1,#+100
   \   000000A4   0x203C             MOVS     R0,#+60
   \   000000A6   0x.... 0x....      BL       LCD_ShowNum
    116                  ADC_ITConfig(ADC1,ADC_IT_EOC,DISABLE);
   \   000000AA   0x2200             MOVS     R2,#+0
   \   000000AC   0xF44F 0x7108      MOV      R1,#+544
   \   000000B0   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40012400
   \   000000B2   0x.... 0x....      BL       ADC_ITConfig
    117                  LCD_DrawCircle(x1, y1, 4);    
   \   000000B6   0x2204             MOVS     R2,#+4
   \   000000B8   0x....             LDR.N    R0,??DataTable4_5
   \   000000BA   0x8801             LDRH     R1,[R0, #+0]
   \   000000BC   0x....             LDR.N    R0,??DataTable4_6
   \   000000BE   0x8800             LDRH     R0,[R0, #+0]
   \   000000C0   0x.... 0x....      BL       LCD_DrawCircle
   \   000000C4   0xE7BA             B.N      ??main_0
    118              }
    119              return 0;
                     ^
Warning[Pe111]: statement is unreachable
    120          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     y1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     x1

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x54 0x48          DC8 "THUR_Team08"
   \              0x55 0x52    
   \              0x5F 0x54    
   \              0x65 0x61    
   \              0x6D 0x30    
   \              0x38 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC1_2_IRQHandler
         8   -> ADC_ClearITPendingBit
         8   -> ADC_GetConversionValue
         8   -> ADC_GetITStatus
      24   ADC_Configure
        24   -> ADC_Cmd
        24   -> ADC_GetCalibrationStatus
        24   -> ADC_GetResetCalibrationStatus
        24   -> ADC_ITConfig
        24   -> ADC_Init
        24   -> ADC_RegularChannelConfig
        24   -> ADC_ResetCalibration
        24   -> ADC_SoftwareStartConvCmd
        24   -> ADC_StartCalibration
       8   GPIO_Configure
         8   -> GPIO_Init
       8   NVIC_Configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> __NVIC_EnableIRQ
       8   RCC_Configure
         8   -> RCC_APB2PeriphClockCmd
       0   __NVIC_EnableIRQ
      16   main
        16   -> ADC_Configure
        16   -> ADC_ITConfig
        16   -> Convert_Pos
        16   -> GPIO_Configure
        16   -> LCD_Clear
        16   -> LCD_DrawCircle
        16   -> LCD_Init
        16   -> LCD_ShowNum
        16   -> LCD_ShowString
        16   -> NVIC_Configure
        16   -> RCC_Configure
        16   -> SystemInit
        16   -> Touch_Adjust
        16   -> Touch_Configuration
        16   -> Touch_GetXY


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
      12  ?_0
      38  ADC1_2_IRQHandler
     120  ADC_Configure
      30  GPIO_Configure
      48  NVIC_Configure
      54  RCC_Configure
      28  __NVIC_EnableIRQ
      48  color
     198  main
       2  value
       2  x1
       2  y1

 
   6 bytes in section .bss
  48 bytes in section .data
  12 bytes in section .rodata
 544 bytes in section .text
 
 544 bytes of CODE  memory
  12 bytes of CONST memory
  54 bytes of DATA  memory

Errors: none
Warnings: 1
